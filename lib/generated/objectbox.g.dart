// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../features/shared/data/entities/location.dart';
import '../features/shared/data/entities/report.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 4881394810353028785),
    name: 'LocationEntity',
    lastPropertyId: const obx_int.IdUid(4, 5068593480922575142),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2996126353601498772),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9081521105518302071),
        name: 'lat',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2386042565570305272),
        name: 'long',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5068593480922575142),
        name: 'address',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3549324361113578349),
    name: 'ReportEntity',
    lastPropertyId: const obx_int.IdUid(8, 6966779359788119824),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 764356712488576530),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4900893683686837058),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4135848502398874038),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5227459681915322440),
        name: 'locationId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 13708790691125150),
        relationTarget: 'LocationEntity',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4677892863826901793),
        name: 'dbStatus',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1220162081596310161),
        name: 'dbType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6966779359788119824),
        name: 'attachments',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 3549324361113578349),
    lastIndexId: const obx_int.IdUid(1, 13708790691125150),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [7880641917799094535],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    LocationEntity: obx_int.EntityDefinition<LocationEntity>(
      model: _entities[0],
      toOneRelations: (LocationEntity object) => [],
      toManyRelations: (LocationEntity object) => {},
      getId: (LocationEntity object) => object.id,
      setId: (LocationEntity object, int id) {
        object.id = id;
      },
      objectToFB: (LocationEntity object, fb.Builder fbb) {
        final addressOffset = fbb.writeString(object.address);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.lat);
        fbb.addFloat64(2, object.long);
        fbb.addOffset(3, addressOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final latParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final longParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = LocationEntity(
          id: idParam,
          lat: latParam,
          long: longParam,
          address: addressParam,
        );

        return object;
      },
    ),
    ReportEntity: obx_int.EntityDefinition<ReportEntity>(
      model: _entities[1],
      toOneRelations: (ReportEntity object) => [object.location],
      toManyRelations: (ReportEntity object) => {},
      getId: (ReportEntity object) => object.id,
      setId: (ReportEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ReportEntity object, fb.Builder fbb) {
        final descriptionOffset = fbb.writeString(object.description);
        final attachmentsOffset = fbb.writeList(
          object.attachments.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, descriptionOffset);
        fbb.addInt64(3, object.date.millisecondsSinceEpoch);
        fbb.addInt64(4, object.location.targetId);
        fbb.addInt64(5, object.dbStatus);
        fbb.addInt64(6, object.dbType);
        fbb.addOffset(7, attachmentsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final attachmentsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 18, []);
        final object =
            ReportEntity(
                id: idParam,
                description: descriptionParam,
                date: dateParam,
                attachments: attachmentsParam,
              )
              ..dbStatus = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                14,
              )
              ..dbType = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                16,
              );
        object.location.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.location.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [LocationEntity] entity fields to define ObjectBox queries.
class LocationEntity_ {
  /// See [LocationEntity.id].
  static final id = obx.QueryIntegerProperty<LocationEntity>(
    _entities[0].properties[0],
  );

  /// See [LocationEntity.lat].
  static final lat = obx.QueryDoubleProperty<LocationEntity>(
    _entities[0].properties[1],
  );

  /// See [LocationEntity.long].
  static final long = obx.QueryDoubleProperty<LocationEntity>(
    _entities[0].properties[2],
  );

  /// See [LocationEntity.address].
  static final address = obx.QueryStringProperty<LocationEntity>(
    _entities[0].properties[3],
  );
}

/// [ReportEntity] entity fields to define ObjectBox queries.
class ReportEntity_ {
  /// See [ReportEntity.id].
  static final id = obx.QueryIntegerProperty<ReportEntity>(
    _entities[1].properties[0],
  );

  /// See [ReportEntity.description].
  static final description = obx.QueryStringProperty<ReportEntity>(
    _entities[1].properties[1],
  );

  /// See [ReportEntity.date].
  static final date = obx.QueryDateProperty<ReportEntity>(
    _entities[1].properties[2],
  );

  /// See [ReportEntity.location].
  static final location = obx.QueryRelationToOne<ReportEntity, LocationEntity>(
    _entities[1].properties[3],
  );

  /// See [ReportEntity.dbStatus].
  static final dbStatus = obx.QueryIntegerProperty<ReportEntity>(
    _entities[1].properties[4],
  );

  /// See [ReportEntity.dbType].
  static final dbType = obx.QueryIntegerProperty<ReportEntity>(
    _entities[1].properties[5],
  );

  /// See [ReportEntity.attachments].
  static final attachments = obx.QueryStringVectorProperty<ReportEntity>(
    _entities[1].properties[6],
  );
}
